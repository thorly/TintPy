#!/usr/bin/env perl
use FileHandle;
use List::Util qw[min max];
$nstate = "";	

if (($#ARGV + 1) < 2){die <<EOS;}
*** $0
*** Copyright 2017, Gamma Remote Sensing, v1.2 7-Dec-2017 clw/awi ***
*** Extract Sentinel state vectors from an OPOD file and write these state vectors to an SLC parameter file  ***
*** The required OPOD file located in a specified directory containing either restituted or precise state vectors  ***

usage: $0 OPOD_vec <SLC_par> <OPOD_dir> [nstate]

input parameters:
  SLC_par  (input/output)ISP SLC/MLI image parameter file
  OPOD_dir (input) directory containing Sentinel-1 precise or restituted OPOD orbit data file (AUX_POEORB or AUX_RESORB)
           https://qc.sentinel1.eo.esa.int/aux_resorb/
  nstate   number of state vectors to extract (default: include 60 sec extention at the start and end of the SLC data)

EOS

$slc_par = $ARGV[0];
(-e $slc_par) or die "ERROR $0: SLC parameter file does not exist: $slc_par\n";
$orb_dir = $ARGV[1];
$log = "OPOD_vec.log";

open(LOG,">$log") or die "ERROR $0: cannot open log file: $log\n";
$time = localtime;
print LOG "$0  @ARGV\n";
print LOG "\$0 processing started: $time \n";
print LOG "SLC parameter file: $slc_par\n";
print LOG "Sentinel OPOD orbit data directory:  $orb_dir\n";

print "$0 processing started: $time \n";
print "SLC parameter file: $slc_par\n";
print "Sentinel OPOD orbit data directory:  $orb_dir\n";

if(($#ARGV + 1) >= 3){
  if ($ARGV[2] ne "-"){
    $nstate  = $ARGV[2];
  }
  print LOG "number of state vectors to extract: $nstate\n";
  print "number of state vectors to extract: $nstate\n";
}

@sensor = extract_param($slc_par, "sensor:");
$sar = $sensor[1];	#SAR sensor ID is the first token
die "ERROR: SAR sensor is not Sentinel-1: $sar!" unless ($sar =~ m/S1/);
@date = extract_param($slc_par,"date:");		#determine image date
@stime1 = extract_param($slc_par, "start_time:");	#determine start time
$st1 = $stime1[1];
$mjd1 = julday($date[1],$date[2],$date[3]) + ($st1-60)/86400.;
@stime2 = extract_param($slc_par, "end_time:");	#determine end time
$st2 = $stime2[1];
$mjd2 = julday($date[1],$date[2],$date[3]) + ($st2+60)/86400.;

print "SAR @sensor\n";
print LOG "SAR @sensor\n";
print "Sentinel image date: @date    MJD: $mjd1\n";
print LOG "Sentinel image date: @date   MJD: $mjd1\n";

#open directory with the OPOD files
opendir(DIR, $orb_dir) or die "ERROR: OPOD file directory does not exist: $orb_dir\n";
while (my $opod = readdir(DIR)) {
  next unless (-f "$orb_dir/$opod");
  next unless ($opod =~ m/$sar/);	#check sensor
  @fncomp = split(/[_\.V]/, $opod);
  $fjd1 = julday(substr(@fncomp[7],0,4),substr(@fncomp[7],4,2),substr(@fncomp[7],6,2))+(substr(@fncomp[7],9,2)*3600+substr(@fncomp[7],11,2)*60+substr(@fncomp[7],13,2))/86400; 
  $fjd2 = julday(substr(@fncomp[8],0,4),substr(@fncomp[8],4,2),substr(@fncomp[8],6,2))+(substr(@fncomp[8],9,2)*3600+substr(@fncomp[8],11,2)*60+substr(@fncomp[8],13,2))/86400; 
  #print "fjd1: $fjd1 fjd2: $fjd2\n";
  next unless (($mjd1 ge $fjd1) and ($mjd2 le $fjd2));	#check within datetime span
  print "OPOD orbit file with state vectors: $opod\n";
  close LOG;

#extract state vectors
  execute("S1_OPOD_vec $slc_par $orb_dir/$opod $nstate", $log);
  $time = localtime;
  print "Processing completed: $time\n";
  open(LOG,">>$log") or die "ERROR $0: cannot open log file: $log\n";
  print LOG "processing end: $time\n";
  exit(0);
}

closedir(DIR);
print LOG "\nERROR: no OPOD state vector found with the required start time!\n";
print "ERROR: no OPOD state vector found with the required start time!\n";
exit(-1);

sub execute{
  my ($command, $log) = @_;
  if (-e $log){open(LOG,">>$log") or die "ERROR $0: cannot open log file: $log\n";}
  else {open(LOG,">$log") or die "ERROR $0: cannot open log file: $log\n";}
  LOG->autoflush;
  print "$command\n";
  print LOG ("\n${command}\n");
  close LOG;
  $exit = system("$command 1>> $log");
  $exit == 0 or die "ERROR $0: non-zero exit status: $command\n"
}

sub extract_param{
  my ($infile,$keyword) = @_;
  open(PAR_IN,$infile) || die "ERROR $0: cannot open parameter file: $infile\n";

  while(<PAR_IN>){
    chomp;
    @tokens = split;
    if($tokens[0] eq $keyword){close PAR_IN; return @tokens;}
  }
  close PAR_IN;
  die "ERROR $0: keyword $keyword not found in file: $infile\n\n";
}

sub julday {
##################################
# Julian Day from Gregorian Date #
##################################

use integer;
my ( $y, $m, $d) = @_;
#print "y,m,d: $y $m $d\n";
my $jd = (1461 * ($y + 4800 +
($m - 14) / 12)) / 4 + (367 *
($m - 2 - 12 * (($m - 14) / 12)))
/ 12 - (3 * (($y + 4900 + ($m - 14)
/ 12) / 100)) / 4 + $d - 32075;
#print "jd: $jd\n";
return $jd;
};

sub caldat {
##################################
# Gregorian Date from Julian Day #
##################################

use integer;
my ($d,$i,$j,$jd,$l,$m,$n,$y);
$jd = shift;
$l = $jd + 68569;
$n = ( 4 * $l ) / 146097;
$l = $l - ( 146097 * $n + 3 ) / 4;
$i = ( 4000 * ( $l + 1 ) ) / 1461001;
$l = $l - ( 1461 * $i ) / 4 + 31;
$j = ( 80 * $l ) / 2447;
$d = $l - ( 2447 * $j ) / 80;
$l = $j / 11;
$m = $j + 2 - ( 12 * $l );
$y = 100 * ( $n - 49 ) + $i + $l;
return ($y,$m,$d);
};

=pod

Algorithms taken from Peter Meyers web site
hermetic.magnet.ch/cal_stud/cal_art.htm

Test numbers:
Given $y = 1; $m = 1; $d = 1;   $jd == 1721426;
Given $y = -4713; $m = 11; $d = 24;  $jd == 0;
Given $y = 1858; $m = 11; $d = 16;   $jd == 2400000;

$jd = julday(1858,11,16);
printf "julian day 16-Nov-1858: %d\n", $jd;
printf "date of julian day %d: %d %d %d\n\n",$jd, caldat($jd);

=cut
